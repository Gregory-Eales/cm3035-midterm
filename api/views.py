from django.shortcuts import render

# Create your views here.
def index(request):
    return render(request, 'index.html')


"""
POST http://127.0.0.1:8000/api/protein/ - add a new record
GET  http://127.0.0.1:8000/api/protein/[PROTEIN ID] - return the protein sequence and all we know about it
http://127.0.0.1:8000/api/protein/A0A016S8J7 returns

GET  http://127.0.0.1:8000/api/pfam/[PFAM ID] - return the domain and it's deacription
http://127.0.0.1:8000/api/pfam/PF00360 returns

GET  http://127.0.0.1:8000/api/proteins/[TAXA ID] - return a list of all proteins for a given organism
NOTE: "id" here is sequential the primary key value generated by django for the table that holds the domain data
http://127.0.0.1:8000/api/proteins/55661 returns

GET  http://127.0.0.1:8000/api/pfams/[TAXA ID] - return a list of all domains in all the proteins for a given organism.
NOTE: "id" here is sequential the primary key value generated by django for the table that holds the domain data
http://127.0.0.1:8000/api/pfams/55661 returns

GET  http://127.0.0.1:8000/api/coverage/[PROTEIN ID] - return the domain coverage for a given protein. That is Sum of the protein domain lengths (start-stop)/length of protein.
http://127.0.0.1:8000/api/coverage/A0A016S8J7 returns
coverage:	0.693069306930693
"""

def protein(request, protein_id):
    
    if request.method == 'GET':
        # get the protein sequence and all we know about it
        # http://
        pass

    elif request.method == 'POST':
        pass


def proteins(request, taxa_id):
    # return a list of all proteins for a given organism
    # NOTE: "id" here is sequential the primary key value generated by django for the table that holds the domain data
    # http://
    pass


def pfam(request, pfam_id):
    # return the domain and it's deacription
    # http://
    pass


def pfams(request, taxa_id):
    # return a list of all domains in all the proteins for a given organism.
    # NOTE: "id" here is sequential the primary key value generated by django for the table that holds the domain data
    # http://
    pass


def coverage(request, protein_id):
    # return the domain coverage for a given protein. That is Sum of the protein domain lengths (start-stop)/length of protein.
    # http://
    pass